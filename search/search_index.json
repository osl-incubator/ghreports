{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitHub Report","text":"<p>GitHub Report tool.</p> <ul> <li>Free software: BSD 3 Clause</li> <li>Documentation: https://opensciencelabs.github.io/ghreports</li> </ul>"},{"location":"#configuration-file","title":"Configuration file","text":"<p>In order to create a configuration file, add to your project, at the root level, a file called .ghreports.yaml, with the following structure:</p> <pre><code>name: myproject-name-slug\ntitle: \"My Report Title\"\nenv-file: .env\nrepos:\n  - myorg-1/myproject1\nauthors:\n  - gh-username-1: GitHub Username 1\noutput-dir: \"/tmp/ghreports\"\n</code></pre>"},{"location":"#how-to-run-the-ghreports","title":"How to run the ghreports","text":"<pre><code>ghreports --start-date 2025-07-01 --end-date 2025-07-31 --config-file tests/.ghreports.yaml\n</code></pre> <p>You can also specify the token in the command line as an argument:</p> <pre><code>ghreports --start-date 2025-07-01 --end-date 2025-07-31 --gh-token blabla --config-file tests/.ghreports.yaml\n</code></pre>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#012-2025-08-13","title":"0.1.2 (2025-08-13)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix release workflow for documentation (#5) (a4c5419)</li> </ul>"},{"location":"changelog/#011-2025-08-13","title":"0.1.1 (2025-08-13)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Rename from ghreport to ghreports; and add @ to the username handles (#4) (e5cdaae)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Your contributions are valued and play a significant role in the continuous improvement of GHReport. We welcome contributions of all forms and acknowledge all efforts.</p>"},{"location":"contributing/#how-you-can-contribute","title":"How You Can Contribute","text":"<p>Contributions can be made in various ways, outlined below:</p>"},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>If you encounter a bug in GHReport, please report it via our GitHub issues page at: https://github.com/osl-incubator/ghreports/issues.</p> <p>When reporting a bug, kindly include the following information to aid in the issue's resolution:</p> <ul> <li>The name and version of your operating system.</li> <li>Any relevant details about your setup that might assist in diagnosing the   issue.</li> <li>A step-by-step guide to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>You can contribute by fixing bugs identified in the GitHub issues. Issues tagged with both \"bug\" and \"help wanted\" are available for anyone to work on.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Feature development is another way to contribute. Review the GitHub issues for requested features. Issues labeled with \"enhancement\" and \"help wanted\" are open for implementation.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>There's always a need for more documentation for GHReport. This could be through enhancing the official documentation, contributing to docstrings, or sharing knowledge via blog posts, articles, and other media.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>Feedback is crucial for project improvement. To submit feedback or propose a feature:</p> <ul> <li>File an issue at   https://github.com/osl-incubator/ghreports/issues.</li> <li>For feature proposals, please provide a detailed explanation of how the   feature would function, aim for a narrow scope to facilitate easier   implementation, and remember, GHReport is a volunteer-driven project, and   we welcome contributions.</li> </ul>"},{"location":"contributing/#requirements","title":"Requirements","text":"<p>Before you begin contributing to the GHReport project, there are several technical prerequisites and best practices you should be familiar with. This section outlines the key requirements to ensure a smooth and productive contribution process.</p>"},{"location":"contributing/#conda-environment","title":"Conda Environment","text":"<p>Conda is a versatile tool that provides package, dependency, and environment management for various programming languages. In the GHReport project, we leverage Conda to manage virtual environments and package dependencies effectively.</p> <ul> <li>Environment Setup: We strongly advise using a Conda environment while   working with GHReport. If Conda is not installed on your system, you can   download it from Miniforge. For an   introductory overview of Conda, consider watching this   Conda Basics video.</li> <li>Best Practices: Avoid installing packages in the base Conda environment.   Always create and activate a new environment for each project to prevent   dependency conflicts and ensure a clean workspace.</li> </ul>"},{"location":"contributing/#git","title":"Git","text":"<p>Our collaborative efforts are facilitated through Git and GitHub. Understanding the fundamentals of Git is crucial for effective participation.</p> <ul> <li>Learning Resources: If you're new to Git, we recommend starting with the   Software Carpentry Git Lesson,   which covers essential Git concepts and workflows.</li> <li>Quick Reference: For a concise summary of common Git commands, refer to   this   Git Cheat Sheet   provided by GitHub.</li> <li>Configuration Tips:</li> <li>To streamline your workflow, configure Git to use <code>rebase</code> by default for     pulling changes with <code>git config --global pull.rebase true</code>.</li> <li>Familiarize yourself with the <code>git rebase</code> command for updating branches     from a remote repository. Although more complex, it is preferred over the     default merge commit strategy. For an in-depth explanation, visit     Atlassian's guide on merging vs. rebasing.</li> <li>Workflow: The standard open-source development workflow includes forking a   repository, cloning the fork locally, and configuring an <code>upstream</code> remote for   the original repository. Detailed instructions can be found in   GitHub's guide to configuring a remote for a fork.</li> </ul>"},{"location":"contributing/#python","title":"Python","text":"<p>Familiarity with Python and adherence to best practices is important for contributing to GHReport.</p> <ul> <li>Style Guide: Follow the PEP 8 style guide for Python code, available at   PEP8.</li> <li>Best Practices: pyOpenSci offers a comprehensive guide for writing Python   packages, which can be found   here.</li> <li>Advanced Learning: To deepen your understanding of Python and general   programming concepts, consider enrolling in the   Design of Computer Programs   course on Udacity. Though challenging and based on Python 2, it provides   valuable insights into advanced Python usage and computer programming   principles.</li> </ul>"},{"location":"contributing/#how-to-get-support","title":"How to Get Support","text":"<p>Should you require assistance, please join our community on the Open Science Labs Discord server at https://opensciencelabs.org/discord. Here, you can participate in the incubator program and ask questions about GHReport in its dedicated channel. You are also welcome to explore and join other groups that align with your interests.</p>"},{"location":"contributing/#setting-up-for-local-development","title":"Setting Up for Local Development","text":"<p>To contribute to <code>ghreports</code>, follow these steps to set up your development environment:</p> <ol> <li> <p>Fork the Repository: Begin by forking the <code>ghreports</code> repository on    GitHub to your own account.</p> </li> <li> <p>Clone Your Fork Locally: Clone the forked repository to your local    machine and navigate into the project directory.</p> </li> </ol> <pre><code>$ git clone git@github.com:your_username/ghreports.git\n$ cd ghreports\n</code></pre> <ol> <li>Install Dependencies: Use <code>mamba</code> to create a Conda environment and    <code>poetry</code> for managing Python dependencies.</li> </ol> <pre><code>$ mamba env create --file conda/dev.yaml --yes\n$ conda activate ghreports\n$ poetry config virtualenvs.create false\n$ poetry install\n</code></pre> <ol> <li>Create a Development Branch: Make a dedicated branch for your bugfix or    feature.</li> </ol> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <ol> <li> <p>Make Changes Locally: You are now ready to implement your changes or    improvements.</p> </li> <li> <p>Install and Use Pre-commit Hooks: <code>ghreports</code> utilizes <code>pre-commit</code> hooks    to ensure code quality. Install them locally and they will automatically run    on each commit.</p> </li> </ol> <pre><code>$ pre-commit install\n$ pre-commit run --all-files\n</code></pre> <p>To bypass the hooks temporarily, use <code>git commit</code> with <code>--no-verify</code>.</p> <ol> <li>Unit Testing with <code>pytest</code>: <code>ghreports</code> leverages <code>pytest</code> for unit    testing, along with <code>pytest-cov</code> for coverage analysis. Run unit tests using:</li> </ol> <pre><code>$ python -m pytest\n</code></pre> <p>or</p> <pre><code>$ makim tests.unittest\n</code></pre> <ol> <li>Commit and Push Changes: Stage, commit, and push your changes to GitHub.    After setting the upstream branch once, subsequent pushes only require    <code>git push</code>.</li> </ol> <pre><code>$ git add .\n$ git commit -m \"Detailed description of your changes.\"\n$ git push --set-upstream origin &lt;branch name&gt;\n</code></pre> <ol> <li>Submit a Pull Request: Once your changes are pushed, go to the GitHub    website to submit a pull request for review.</li> </ol>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>The GHReport project utilizes <code>semantic-release</code> to automate the release process, basing new releases on the content of commit messages.</p>"},{"location":"contributing/#commit-message-format","title":"Commit Message Format","text":"<p><code>semantic-release</code> analyzes commit messages to assess the impact of changes made to the codebase. Adhering to a standardized commit message format allows <code>semantic-release</code> to automatically determine the next semantic version number, generate a comprehensive changelog, and publish the release.</p> <p>While <code>semantic-release</code> defaults to the Angular Commit Message Conventions, GHReport adopts the \"Conventional Commits\" standard (https://www.conventionalcommits.org/en/v1.0.0/). This standard facilitates more detailed commit messages, especially for \"breaking changes\".</p> <p>Given the project's use of the <code>squash and merge</code> strategy for merging pull requests, it is crucial to format the PR title according to the commit message standards.</p> <p>To aid contributors in crafting compliant commit messages, tools like commitizen and commitlint are recommended. These tools help ensure that commit messages adhere to the required format.</p> <p>The following table illustrates how different commit messages correspond to the type of release generated by <code>semantic-release</code>, according to its default configuration:</p> Commit Message Example Release Type <code>fix(pencil): stop graphite breaking when too much pressure</code> Patch Release <code>feat(pencil): add 'graphiteWidth' option</code> Minor Release <code>perf(pencil): optimize 'graphiteWidth' calculation</code> Patch Release <code>fix(pencil)!: 'graphiteWidth' option removed</code> Major Release <p>Note: Within the Conventional Commits standard, appending <code>!</code> to the message prefix indicates a breaking change.</p> <p>For more details on the commit message format used by <code>semantic-release</code>, visit the semantic-release documentation.</p>"},{"location":"features/","title":"Features","text":"<p>TBD</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable Release","text":"<p>To install GHReport, run the following command in your terminal:</p> <pre><code>$ pip install ghreports\n</code></pre> <p>These installation methods will always provide you with the most recent stable release.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for ghreports can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/osl-incubator/ghreports.git\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/osl-incubator/ghreports.git/tarball/main\n</code></pre> <p>Once you have a copy of the source, change to the project root directory and install it with:</p> <pre><code>$ poetry install\n</code></pre> <p>PS: You need to have poetry installed. You can use it also from a conda environment. Check the <code>Contributing</code> page for more information.</p>"},{"location":"spec/","title":"Specifications","text":"<p>TBD</p>"}]}